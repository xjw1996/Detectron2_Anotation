
import numpy as np
import cv2 as cv
from PIL import Image
#from matplotlib import pyplot
import matplotlib.pyplot as plt
import random
#from google.colab.patches import cv2_imshow

import detectron2
import torch
from detectron2.utils.logger import setup_logger
setup_logger()

import cv2

from detectron2.utils.visualizer import ColorMode
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog


from detectron2 import model_zoo


class SegmentationDetector():
    def DetectorSingleImage(self,image):
        cfg = get_cfg()
        cfg.merge_from_file("/home/chen/detectron3/detectron2/configs/COCO-PanopticSegmentation/panoptic_fpn_R_101_3x.yaml")
        cfg.MODEL.WEIGHTS = "/home/chen/detectron3/detectron2/model/model_final_cafdb1.pkl"
        predictor = DefaultPredictor(cfg)
        output = predictor(image)
        # print(output)
        mask = output["instances"].pred_masks.cpu().numpy()
        print(len(mask))
        print(len(mask))
        panoptic_seg, segments_info = predictor(image)["panoptic_seg"]
        print(segments_info)

        print(panoptic_seg)
        print(panoptic_seg[0])
        print("len",len(panoptic_seg))
        print("len",len(panoptic_seg[0]))
        print("len",len(image))
        print("len",len(image[0]))

        meta = MetadataCatalog.get("coco_2017_val_panoptic_separated")
        
        # get()方法语法： dict.get(key, de?fault=None)
        for data in range(len(segments_info)):

            if(segments_info[data].get("isthing") == True):
                print(meta.thing_classes[segments_info[data].get("category_id")])
                print(segments_info[data].get("category_id"))
                print("----------------------------------------------------------------------")
            else:
                print(meta.stuff_classes[segments_info[data].get("category_id")])
                print(segments_info[data].get("category_id"))
                print("----------------------------------------------------------------------")
        IsNotThing = []
        for x in range(len(segments_info)):
                if(segments_info[x].get("isthing") == True):
                    pass
                else:
                    IsNotThing.append(segments_info[x].get("id"))

        print(IsNotThing)

                    
        

        # v = Visualizer(im[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=1.2)
        # v = v.draw_panoptic_seg_predictions(panoptic_seg.to("cpu"), segments_info)
        # cv2.imshow('image', v.get_image()[:,:,::-1])
        # cv2.waitKey(0)

        temp_mask_fill = np.zeros((len(image), len(image[0])))
        # 处理一章图片需要2分40秒  血受
        # # temp_mask_fill=temp_mask_fill.tolist()
        # for x in range(len(panoptic_seg)):
        #     for y in range(len(panoptic_seg[0])):   
        #         if(panoptic_seg[x][y] in IsNotThing):
        #             temp_mask_fill[x][y] = int(0)
        #             # print(temp_mask_fill[x][y])
        #         else:
        #             temp_mask_fill[x][y] = 255
     
        panoptic_seg = panoptic_seg.data.cpu().numpy()


        # 遍历一个矩阵
        # for i in np.nditer(panoptic_seg, order='C'):
        #     print(i)


        for x,y in np.nditer([panoptic_seg,temp_mask_fill],op_flags = ['readwrite'],order='C'):
            if(x in IsNotThing):
                y[...] = 0
            else:
                y[...] = 255
                
        
        return temp_mask_fill


class MoveingObjectOriginalColor():

    def FindOriginalColor(self,OriginImage,MoveingImage):
        #数据由原来的0.  变为0   否则找不到contours
        MoveingImage = MoveingImage.astype(np.uint8)
        contours, hierarchy = cv2.findContours( MoveingImage, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        max_contour = contours[0]
        max_area = 0
        for contour_one in contours:
            area = cv2.contourArea(contour_one)
            if (area > max_area):
                max_contour = contour_one
                max_area = area

        # print("I am max_contour",max_contour)
        # print("I am max_area",max_area)

        mask = np.zeros((len(MoveingImage), len(MoveingImage[0]),3))
        
        cv2.fillConvexPoly(mask, max_contour, (255,255,255))

        #给MoveingImage的白色地方加上圆图的RGB
        print(type(OriginImage[0][0]))
        
        for x,y in np.nditer([mask,OriginImage],op_flags = ['readwrite'],order='C'):
            if(x == 0.0):
                y[...]=x
            else:
                pass
        
        return OriginImage
        # cv2.imshow('image', OriginImage)
        # cv2.waitKey(0)





class InstancePerson():

    def instanceperson(self,image):
        cfg = get_cfg()
        cfg.merge_from_file(model_zoo.get_config_file('COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml'))
        cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.75
        cfg.MODEL.WEIGHTS = "/home/chen/detectron3/detectron2/model/model_final_f10217.pkl"
        cfg.MODEL.DEVICE ="cuda"

        predictor = DefaultPredictor(cfg)


        output = predictor(image)
        v= Visualizer(image[:,:,::-1],
                scale=0.8,
                metadata=MetadataCatalog.get(cfg.DATASETS.TRAIN[0]),
                instance_mode=ColorMode.IMAGE
                )
        # v=v.draw_instance_predictions(output['instances'][output['instances'].pred_classes == 0].to("cpu"))
        # cv2.imshow('image', v.get_image()[:,:,::-1])
        # cv2.waitKey(0)

        mask_persion = output["instances"].pred_masks.cpu().numpy()[0] 
        temp_mask_persion = mask_persion.astype(int)
        for x in np.nditer(temp_mask_persion,op_flags = ['readwrite'],order='C'):
            if(x == 0):
                pass
            else:
                x[...] = 255
        temp_mask_persion = temp_mask_persion.astype('uint8')
        # print(temp_mask_persion)
        temp_mask_persion = cv2.dilate(temp_mask_persion, np.ones((30, 30)))


        

        for x in range(len(temp_mask_persion)):
            for y in range(len(temp_mask_persion[0])):
                if (temp_mask_persion[x][y] == 0):
                    pass
                else:
                    image[x][y] = [0,0,0]


        image_thresholding = np.zeros((len(image), len(image[0])))
        for x in range(len(temp_mask_persion)):
            for y in range(len(temp_mask_persion[0])):
                if (image[x][y][0] == 0 ):
                    image_thresholding[x][y] = int(0)
                else:
                    image_thresholding[x][y] = int(255)
                    
            

        return image_thresholding


class DrawTheBoundingbox():
    def draw(self,image,threshold):
        threshold = threshold.astype(np.uint8)
        contours, hierarchy = cv2.findContours(threshold, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        # 小さい輪郭は誤検出として削除する
        # contours = list(filter(lambda x: cv2.contourArea(x) > 100, contours))

        max_contour = contours[0]
        max_area = 0
        for contour_one in contours:
            area = cv2.contourArea(contour_one)
            if (area > max_area):
                max_contour = contour_one
                max_area = area
        # im = cv2.drawContours(im, [max_contour], 0, (0, 255, 0), 3)
        # 輪郭を描画する。

        rect = max_contour
        x, y, w, h = cv2.boundingRect(rect)
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 10)
          
        cv2.drawContours(image, max_contour, -1, color=(0, 0, 255), thickness=2)
        cv2.imshow('image', image)
        cv2.waitKey(0)




if __name__ == "__main__":
    im = cv.imread("/home/chen/detectron3/detectron2/images/test3/output1/38.jpg")
    im2 = cv.imread("/home/chen/detectron3/detectron2/images/test3/output1/38.jpg")
    GotoPredictor = SegmentationDetector()
    MoveingObject = GotoPredictor.DetectorSingleImage(im)
    print(MoveingObject)

    GotoOriginalColor = MoveingObjectOriginalColor()
    OriginalColor = GotoOriginalColor.FindOriginalColor(im,MoveingObject)

    
    Persion=InstancePerson()
    GetPersion = Persion.instanceperson(OriginalColor)


    DrawBox = DrawTheBoundingbox()
    Box = DrawBox.draw(im2,GetPersion)
    cv2.imshow('image', Box)
    cv2.waitKey(0)
